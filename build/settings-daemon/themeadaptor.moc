/****************************************************************************
** Meta object code from reading C++ file 'themeadaptor.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "themeadaptor.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'themeadaptor.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_ThemeAdaptor_t {
    QByteArrayData data[53];
    char stringdata0[3881];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_ThemeAdaptor_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_ThemeAdaptor_t qt_meta_stringdata_ThemeAdaptor = {
    {
QT_MOC_LITERAL(0, 0, 12), // "ThemeAdaptor"
QT_MOC_LITERAL(1, 13, 15), // "D-Bus Interface"
QT_MOC_LITERAL(2, 29, 16), // "com.matsya.Theme"
QT_MOC_LITERAL(3, 46, 19), // "D-Bus Introspection"
QT_MOC_LITERAL(4, 66, 3100), // "  <interface name=\"com.matsy..."
QT_MOC_LITERAL(5, 2878, 18), // "accentColorChanged"
QT_MOC_LITERAL(6, 2897, 0), // ""
QT_MOC_LITERAL(7, 2898, 3), // "in0"
QT_MOC_LITERAL(8, 2902, 22), // "backgroundColorChanged"
QT_MOC_LITERAL(9, 2925, 21), // "backgroundTypeChanged"
QT_MOC_LITERAL(10, 2947, 17), // "cursorSizeChanged"
QT_MOC_LITERAL(11, 2965, 18), // "cursorThemeChanged"
QT_MOC_LITERAL(12, 2984, 15), // "darkModeChanged"
QT_MOC_LITERAL(13, 3000, 27), // "darkModeDimsWallpaerChanged"
QT_MOC_LITERAL(14, 3028, 16), // "iconThemeChanged"
QT_MOC_LITERAL(15, 3045, 17), // "systemFontChanged"
QT_MOC_LITERAL(16, 3063, 26), // "systemFontPointSizeChanged"
QT_MOC_LITERAL(17, 3090, 16), // "wallpaperChanged"
QT_MOC_LITERAL(18, 3107, 15), // "applyXResources"
QT_MOC_LITERAL(19, 3123, 14), // "setAccentColor"
QT_MOC_LITERAL(20, 3138, 11), // "accentColor"
QT_MOC_LITERAL(21, 3150, 18), // "setBackgroundColor"
QT_MOC_LITERAL(22, 3169, 5), // "color"
QT_MOC_LITERAL(23, 3175, 17), // "setBackgroundType"
QT_MOC_LITERAL(24, 3193, 4), // "type"
QT_MOC_LITERAL(25, 3198, 13), // "setCursorSize"
QT_MOC_LITERAL(26, 3212, 14), // "setCursorTheme"
QT_MOC_LITERAL(27, 3227, 11), // "setDarkMode"
QT_MOC_LITERAL(28, 3239, 8), // "darkMode"
QT_MOC_LITERAL(29, 3248, 23), // "setDarkModeDimsWallpaer"
QT_MOC_LITERAL(30, 3272, 20), // "darkModeDimsWallpaer"
QT_MOC_LITERAL(31, 3293, 19), // "setDevicePixelRatio"
QT_MOC_LITERAL(32, 3313, 5), // "ratio"
QT_MOC_LITERAL(33, 3319, 12), // "setIconTheme"
QT_MOC_LITERAL(34, 3332, 18), // "setSystemFixedFont"
QT_MOC_LITERAL(35, 3351, 10), // "fontFamily"
QT_MOC_LITERAL(36, 3362, 13), // "setSystemFont"
QT_MOC_LITERAL(37, 3376, 22), // "setSystemFontPointSize"
QT_MOC_LITERAL(38, 3399, 8), // "fontSize"
QT_MOC_LITERAL(39, 3408, 12), // "setWallpaper"
QT_MOC_LITERAL(40, 3421, 4), // "path"
QT_MOC_LITERAL(41, 3426, 16), // "updateFontConfig"
QT_MOC_LITERAL(42, 3443, 15), // "backgroundColor"
QT_MOC_LITERAL(43, 3459, 14), // "backgroundType"
QT_MOC_LITERAL(44, 3474, 10), // "cursorSize"
QT_MOC_LITERAL(45, 3485, 11), // "cursorTheme"
QT_MOC_LITERAL(46, 3497, 16), // "devicePixelRatio"
QT_MOC_LITERAL(47, 3514, 9), // "iconTheme"
QT_MOC_LITERAL(48, 3524, 10), // "isDarkMode"
QT_MOC_LITERAL(49, 3535, 15), // "systemFixedFont"
QT_MOC_LITERAL(50, 3551, 10), // "systemFont"
QT_MOC_LITERAL(51, 3562, 19), // "systemFontPointSize"
QT_MOC_LITERAL(52, 3582, 9) // "wallpaper"

    },
    "ThemeAdaptor\0D-Bus Interface\0"
    "com.matsya.Theme\0D-Bus Introspection\0"
    "  <interface name=\"com.matsya.Theme\">\n    <method name=\"setDarkMod"
    "e\">\n      <arg direction=\"in\" type=\"b\" name=\"darkMode\"/>\n    "
    "</method>\n    <method name=\"setDarkModeDimsWallpaer\">\n      <arg d"
    "irection=\"in\" type=\"b\" name=\"darkModeDimsWallpaer\"/>\n    </meth"
    "od>\n    <method name=\"setSystemFont\">\n      <arg direction=\"in\" "
    "type=\"s\" name=\"fontFamily\"/>\n    </method>\n    <method name=\"se"
    "tSystemFixedFont\">\n      <arg direction=\"in\" type=\"s\" name=\"fon"
    "tFamily\"/>\n    </method>\n    <method name=\"setSystemFontPointSize\""
    ">\n      <arg direction=\"in\" type=\"d\" name=\"fontSize\"/>\n    </m"
    "ethod>\n    <method name=\"setDevicePixelRatio\">\n      <arg directio"
    "n=\"in\" type=\"d\" name=\"ratio\"/>\n    </method>\n    <method name="
    "\"setWallpaper\">\n      <arg direction=\"in\" type=\"s\" name=\"path\""
    "/>\n    </method>\n    <method name=\"setAccentColor\">\n      <arg di"
    "rection=\"in\" type=\"i\" name=\"accentColor\"/>\n    </method>\n    <"
    "method name=\"setBackgroundColor\">\n      <arg direction=\"in\" type="
    "\"s\" name=\"color\"/>\n    </method>\n    <method name=\"setBackgroun"
    "dType\">\n      <arg direction=\"in\" type=\"i\" name=\"type\"/>\n    "
    "</method>\n    <method name=\"setCursorTheme\">\n      <arg direction="
    "\"in\" type=\"s\" name=\"type\"/>\n    </method>\n    <method name=\"s"
    "etCursorSize\">\n      <arg direction=\"in\" type=\"i\" name=\"type\"/"
    ">\n    </method>\n    <method name=\"setIconTheme\">\n      <arg direc"
    "tion=\"in\" type=\"s\" name=\"type\"/>\n    </method>\n    <method nam"
    "e=\"applyXResources\"/>\n    <method name=\"updateFontConfig\"/>\n    "
    "<property access=\"read\" type=\"b\" name=\"isDarkMode\"/>\n    <prope"
    "rty access=\"read\" type=\"b\" name=\"darkModeDimsWallpaer\"/>\n    <p"
    "roperty access=\"read\" type=\"s\" name=\"systemFont\"/>\n    <propert"
    "y access=\"read\" type=\"s\" name=\"systemFixedFont\"/>\n    <property"
    " access=\"read\" type=\"d\" name=\"systemFontPointSize\"/>\n    <prope"
    "rty access=\"read\" type=\"d\" name=\"devicePixelRatio\"/>\n    <prope"
    "rty access=\"read\" type=\"s\" name=\"wallpaper\"/>\n    <property acc"
    "ess=\"read\" type=\"i\" name=\"accentColor\"/>\n    <property access=\""
    "read\" type=\"i\" name=\"backgroundType\"/>\n    <property access=\"re"
    "ad\" type=\"s\" name=\"backgroundColor\"/>\n    <property access=\"rea"
    "d\" type=\"s\" name=\"cursorTheme\"/>\n    <property access=\"read\" t"
    "ype=\"i\" name=\"cursorSize\"/>\n    <property access=\"read\" type=\""
    "s\" name=\"iconTheme\"/>\n    <signal name=\"darkModeChanged\">\n     "
    " <arg type=\"b\"/>\n    </signal>\n    <signal name=\"wallpaperChanged"
    "\">\n      <arg type=\"s\"/>\n    </signal>\n    <signal name=\"darkMo"
    "deDimsWallpaerChanged\"/>\n    <signal name=\"accentColorChanged\">\n "
    "     <arg type=\"i\"/>\n    </signal>\n    <signal name=\"backgroundTy"
    "peChanged\"/>\n    <signal name=\"backgroundColorChanged\"/>\n    <sig"
    "nal name=\"cursorThemeChanged\"/>\n    <signal name=\"cursorSizeChange"
    "d\"/>\n    <signal name=\"iconThemeChanged\"/>\n    <signal name=\"sys"
    "temFontPointSizeChanged\"/>\n    <signal name=\"systemFontChanged\"/>\n"
    "  </interface>\n\0"
    "accentColorChanged\0\0in0\0backgroundColorChanged\0"
    "backgroundTypeChanged\0cursorSizeChanged\0"
    "cursorThemeChanged\0darkModeChanged\0"
    "darkModeDimsWallpaerChanged\0"
    "iconThemeChanged\0systemFontChanged\0"
    "systemFontPointSizeChanged\0wallpaperChanged\0"
    "applyXResources\0setAccentColor\0"
    "accentColor\0setBackgroundColor\0color\0"
    "setBackgroundType\0type\0setCursorSize\0"
    "setCursorTheme\0setDarkMode\0darkMode\0"
    "setDarkModeDimsWallpaer\0darkModeDimsWallpaer\0"
    "setDevicePixelRatio\0ratio\0setIconTheme\0"
    "setSystemFixedFont\0fontFamily\0"
    "setSystemFont\0setSystemFontPointSize\0"
    "fontSize\0setWallpaper\0path\0updateFontConfig\0"
    "backgroundColor\0backgroundType\0"
    "cursorSize\0cursorTheme\0devicePixelRatio\0"
    "iconTheme\0isDarkMode\0systemFixedFont\0"
    "systemFont\0systemFontPointSize\0wallpaper"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_ThemeAdaptor[] = {

 // content:
       8,       // revision
       0,       // classname
       2,   14, // classinfo
      26,   18, // methods
      13,  206, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
      11,       // signalCount

 // classinfo: key, value
       1,    2,
       3,    4,

 // signals: name, argc, parameters, tag, flags
       5,    1,  148,    6, 0x06 /* Public */,
       8,    0,  151,    6, 0x06 /* Public */,
       9,    0,  152,    6, 0x06 /* Public */,
      10,    0,  153,    6, 0x06 /* Public */,
      11,    0,  154,    6, 0x06 /* Public */,
      12,    1,  155,    6, 0x06 /* Public */,
      13,    0,  158,    6, 0x06 /* Public */,
      14,    0,  159,    6, 0x06 /* Public */,
      15,    0,  160,    6, 0x06 /* Public */,
      16,    0,  161,    6, 0x06 /* Public */,
      17,    1,  162,    6, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
      18,    0,  165,    6, 0x0a /* Public */,
      19,    1,  166,    6, 0x0a /* Public */,
      21,    1,  169,    6, 0x0a /* Public */,
      23,    1,  172,    6, 0x0a /* Public */,
      25,    1,  175,    6, 0x0a /* Public */,
      26,    1,  178,    6, 0x0a /* Public */,
      27,    1,  181,    6, 0x0a /* Public */,
      29,    1,  184,    6, 0x0a /* Public */,
      31,    1,  187,    6, 0x0a /* Public */,
      33,    1,  190,    6, 0x0a /* Public */,
      34,    1,  193,    6, 0x0a /* Public */,
      36,    1,  196,    6, 0x0a /* Public */,
      37,    1,  199,    6, 0x0a /* Public */,
      39,    1,  202,    6, 0x0a /* Public */,
      41,    0,  205,    6, 0x0a /* Public */,

 // signals: parameters
    QMetaType::Void, QMetaType::Int,    7,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Bool,    7,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString,    7,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,   20,
    QMetaType::Void, QMetaType::QString,   22,
    QMetaType::Void, QMetaType::Int,   24,
    QMetaType::Void, QMetaType::Int,   24,
    QMetaType::Void, QMetaType::QString,   24,
    QMetaType::Void, QMetaType::Bool,   28,
    QMetaType::Void, QMetaType::Bool,   30,
    QMetaType::Void, QMetaType::Double,   32,
    QMetaType::Void, QMetaType::QString,   24,
    QMetaType::Void, QMetaType::QString,   35,
    QMetaType::Void, QMetaType::QString,   35,
    QMetaType::Void, QMetaType::Double,   38,
    QMetaType::Void, QMetaType::QString,   40,
    QMetaType::Void,

 // properties: name, type, flags
      20, QMetaType::Int, 0x00095001,
      42, QMetaType::QString, 0x00095001,
      43, QMetaType::Int, 0x00095001,
      44, QMetaType::Int, 0x00095001,
      45, QMetaType::QString, 0x00095001,
      30, QMetaType::Bool, 0x00095001,
      46, QMetaType::Double, 0x00095001,
      47, QMetaType::QString, 0x00095001,
      48, QMetaType::Bool, 0x00095001,
      49, QMetaType::QString, 0x00095001,
      50, QMetaType::QString, 0x00095001,
      51, QMetaType::Double, 0x00095001,
      52, QMetaType::QString, 0x00095001,

       0        // eod
};

void ThemeAdaptor::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<ThemeAdaptor *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->accentColorChanged((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 1: _t->backgroundColorChanged(); break;
        case 2: _t->backgroundTypeChanged(); break;
        case 3: _t->cursorSizeChanged(); break;
        case 4: _t->cursorThemeChanged(); break;
        case 5: _t->darkModeChanged((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 6: _t->darkModeDimsWallpaerChanged(); break;
        case 7: _t->iconThemeChanged(); break;
        case 8: _t->systemFontChanged(); break;
        case 9: _t->systemFontPointSizeChanged(); break;
        case 10: _t->wallpaperChanged((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 11: _t->applyXResources(); break;
        case 12: _t->setAccentColor((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 13: _t->setBackgroundColor((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 14: _t->setBackgroundType((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 15: _t->setCursorSize((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 16: _t->setCursorTheme((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 17: _t->setDarkMode((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 18: _t->setDarkModeDimsWallpaer((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 19: _t->setDevicePixelRatio((*reinterpret_cast< double(*)>(_a[1]))); break;
        case 20: _t->setIconTheme((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 21: _t->setSystemFixedFont((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 22: _t->setSystemFont((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 23: _t->setSystemFontPointSize((*reinterpret_cast< double(*)>(_a[1]))); break;
        case 24: _t->setWallpaper((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 25: _t->updateFontConfig(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (ThemeAdaptor::*)(int );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::accentColorChanged)) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::backgroundColorChanged)) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::backgroundTypeChanged)) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::cursorSizeChanged)) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::cursorThemeChanged)) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)(bool );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::darkModeChanged)) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::darkModeDimsWallpaerChanged)) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::iconThemeChanged)) {
                *result = 7;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::systemFontChanged)) {
                *result = 8;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::systemFontPointSizeChanged)) {
                *result = 9;
                return;
            }
        }
        {
            using _t = void (ThemeAdaptor::*)(const QString & );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&ThemeAdaptor::wallpaperChanged)) {
                *result = 10;
                return;
            }
        }
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<ThemeAdaptor *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< int*>(_v) = _t->accentColor(); break;
        case 1: *reinterpret_cast< QString*>(_v) = _t->backgroundColor(); break;
        case 2: *reinterpret_cast< int*>(_v) = _t->backgroundType(); break;
        case 3: *reinterpret_cast< int*>(_v) = _t->cursorSize(); break;
        case 4: *reinterpret_cast< QString*>(_v) = _t->cursorTheme(); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->darkModeDimsWallpaer(); break;
        case 6: *reinterpret_cast< double*>(_v) = _t->devicePixelRatio(); break;
        case 7: *reinterpret_cast< QString*>(_v) = _t->iconTheme(); break;
        case 8: *reinterpret_cast< bool*>(_v) = _t->isDarkMode(); break;
        case 9: *reinterpret_cast< QString*>(_v) = _t->systemFixedFont(); break;
        case 10: *reinterpret_cast< QString*>(_v) = _t->systemFont(); break;
        case 11: *reinterpret_cast< double*>(_v) = _t->systemFontPointSize(); break;
        case 12: *reinterpret_cast< QString*>(_v) = _t->wallpaper(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
}

QT_INIT_METAOBJECT const QMetaObject ThemeAdaptor::staticMetaObject = { {
    QMetaObject::SuperData::link<QDBusAbstractAdaptor::staticMetaObject>(),
    qt_meta_stringdata_ThemeAdaptor.data,
    qt_meta_data_ThemeAdaptor,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *ThemeAdaptor::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ThemeAdaptor::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_ThemeAdaptor.stringdata0))
        return static_cast<void*>(this);
    return QDBusAbstractAdaptor::qt_metacast(_clname);
}

int ThemeAdaptor::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractAdaptor::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 26)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 26;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 26)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 26;
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 13;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 13;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 13;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 13;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 13;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 13;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void ThemeAdaptor::accentColorChanged(int _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 0, _a);
}

// SIGNAL 1
void ThemeAdaptor::backgroundColorChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void ThemeAdaptor::backgroundTypeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void ThemeAdaptor::cursorSizeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void ThemeAdaptor::cursorThemeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void ThemeAdaptor::darkModeChanged(bool _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 5, _a);
}

// SIGNAL 6
void ThemeAdaptor::darkModeDimsWallpaerChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 6, nullptr);
}

// SIGNAL 7
void ThemeAdaptor::iconThemeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 7, nullptr);
}

// SIGNAL 8
void ThemeAdaptor::systemFontChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 8, nullptr);
}

// SIGNAL 9
void ThemeAdaptor::systemFontPointSizeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 9, nullptr);
}

// SIGNAL 10
void ThemeAdaptor::wallpaperChanged(const QString & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 10, _a);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
