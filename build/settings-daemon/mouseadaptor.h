/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a mouseadaptor -i mouse/mousemanager.h -l Mouse /run/media/tokyo/DATA/Documents/final/core/settings-daemon/mouse/com.matsya.Mouse.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef MOUSEADAPTOR_H
#define MOUSEADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "mouse/mousemanager.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.matsya.Mouse
 */
class MouseAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.matsya.Mouse")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.matsya.Mouse\">\n"
"    <method name=\"setLeftHanded\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"value\"/>\n"
"    </method>\n"
"    <property access=\"read\" type=\"b\" name=\"leftHanded\"/>\n"
"    <signal name=\"leftHandedChanged\"/>\n"
"    <method name=\"setPointerAcceleration\">\n"
"      <arg direction=\"in\" type=\"d\" name=\"value\"/>\n"
"    </method>\n"
"    <property access=\"read\" type=\"d\" name=\"pointerAcceleration\"/>\n"
"    <signal name=\"pointerAccelerationChanged\"/>\n"
"    <method name=\"setNaturalScroll\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"value\"/>\n"
"    </method>\n"
"    <property access=\"read\" type=\"b\" name=\"naturalScroll\"/>\n"
"    <signal name=\"naturalScrollChanged\"/>\n"
"  </interface>\n"
        "")
public:
    MouseAdaptor(Mouse *parent);
    virtual ~MouseAdaptor();

    inline Mouse *parent() const
    { return static_cast<Mouse *>(QObject::parent()); }

public: // PROPERTIES
    Q_PROPERTY(bool leftHanded READ leftHanded)
    bool leftHanded() const;

    Q_PROPERTY(bool naturalScroll READ naturalScroll)
    bool naturalScroll() const;

    Q_PROPERTY(double pointerAcceleration READ pointerAcceleration)
    double pointerAcceleration() const;

public Q_SLOTS: // METHODS
    void setLeftHanded(bool value);
    void setNaturalScroll(bool value);
    void setPointerAcceleration(double value);
Q_SIGNALS: // SIGNALS
    void leftHandedChanged();
    void naturalScrollChanged();
    void pointerAccelerationChanged();
};

#endif
