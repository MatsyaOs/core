/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a themeadaptor -i theme/thememanager.h -l ThemeManager /home/tokyo/clone/RebootOS/core/settings-daemon/theme/com.cutefish.Theme.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "themeadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ThemeAdaptor
 */

ThemeAdaptor::ThemeAdaptor(ThemeManager *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ThemeAdaptor::~ThemeAdaptor()
{
    // destructor
}

int ThemeAdaptor::accentColor() const
{
    // get the value of property accentColor
    return qvariant_cast< int >(parent()->property("accentColor"));
}

QString ThemeAdaptor::backgroundColor() const
{
    // get the value of property backgroundColor
    return qvariant_cast< QString >(parent()->property("backgroundColor"));
}

int ThemeAdaptor::backgroundType() const
{
    // get the value of property backgroundType
    return qvariant_cast< int >(parent()->property("backgroundType"));
}

int ThemeAdaptor::cursorSize() const
{
    // get the value of property cursorSize
    return qvariant_cast< int >(parent()->property("cursorSize"));
}

QString ThemeAdaptor::cursorTheme() const
{
    // get the value of property cursorTheme
    return qvariant_cast< QString >(parent()->property("cursorTheme"));
}

bool ThemeAdaptor::darkModeDimsWallpaer() const
{
    // get the value of property darkModeDimsWallpaer
    return qvariant_cast< bool >(parent()->property("darkModeDimsWallpaer"));
}

double ThemeAdaptor::devicePixelRatio() const
{
    // get the value of property devicePixelRatio
    return qvariant_cast< double >(parent()->property("devicePixelRatio"));
}

QString ThemeAdaptor::iconTheme() const
{
    // get the value of property iconTheme
    return qvariant_cast< QString >(parent()->property("iconTheme"));
}

bool ThemeAdaptor::isDarkMode() const
{
    // get the value of property isDarkMode
    return qvariant_cast< bool >(parent()->property("isDarkMode"));
}

QString ThemeAdaptor::systemFixedFont() const
{
    // get the value of property systemFixedFont
    return qvariant_cast< QString >(parent()->property("systemFixedFont"));
}

QString ThemeAdaptor::systemFont() const
{
    // get the value of property systemFont
    return qvariant_cast< QString >(parent()->property("systemFont"));
}

double ThemeAdaptor::systemFontPointSize() const
{
    // get the value of property systemFontPointSize
    return qvariant_cast< double >(parent()->property("systemFontPointSize"));
}

QString ThemeAdaptor::wallpaper() const
{
    // get the value of property wallpaper
    return qvariant_cast< QString >(parent()->property("wallpaper"));
}

void ThemeAdaptor::applyXResources()
{
    // handle method call com.cutefish.Theme.applyXResources
    parent()->applyXResources();
}

void ThemeAdaptor::setAccentColor(int accentColor)
{
    // handle method call com.cutefish.Theme.setAccentColor
    parent()->setAccentColor(accentColor);
}

void ThemeAdaptor::setBackgroundColor(const QString &color)
{
    // handle method call com.cutefish.Theme.setBackgroundColor
    parent()->setBackgroundColor(color);
}

void ThemeAdaptor::setBackgroundType(int type)
{
    // handle method call com.cutefish.Theme.setBackgroundType
    parent()->setBackgroundType(type);
}

void ThemeAdaptor::setCursorSize(int type)
{
    // handle method call com.cutefish.Theme.setCursorSize
    parent()->setCursorSize(type);
}

void ThemeAdaptor::setCursorTheme(const QString &type)
{
    // handle method call com.cutefish.Theme.setCursorTheme
    parent()->setCursorTheme(type);
}

void ThemeAdaptor::setDarkMode(bool darkMode)
{
    // handle method call com.cutefish.Theme.setDarkMode
    parent()->setDarkMode(darkMode);
}

void ThemeAdaptor::setDarkModeDimsWallpaer(bool darkModeDimsWallpaer)
{
    // handle method call com.cutefish.Theme.setDarkModeDimsWallpaer
    parent()->setDarkModeDimsWallpaer(darkModeDimsWallpaer);
}

void ThemeAdaptor::setDevicePixelRatio(double ratio)
{
    // handle method call com.cutefish.Theme.setDevicePixelRatio
    parent()->setDevicePixelRatio(ratio);
}

void ThemeAdaptor::setIconTheme(const QString &type)
{
    // handle method call com.cutefish.Theme.setIconTheme
    parent()->setIconTheme(type);
}

void ThemeAdaptor::setSystemFixedFont(const QString &fontFamily)
{
    // handle method call com.cutefish.Theme.setSystemFixedFont
    parent()->setSystemFixedFont(fontFamily);
}

void ThemeAdaptor::setSystemFont(const QString &fontFamily)
{
    // handle method call com.cutefish.Theme.setSystemFont
    parent()->setSystemFont(fontFamily);
}

void ThemeAdaptor::setSystemFontPointSize(double fontSize)
{
    // handle method call com.cutefish.Theme.setSystemFontPointSize
    parent()->setSystemFontPointSize(fontSize);
}

void ThemeAdaptor::setWallpaper(const QString &path)
{
    // handle method call com.cutefish.Theme.setWallpaper
    parent()->setWallpaper(path);
}

void ThemeAdaptor::updateFontConfig()
{
    // handle method call com.cutefish.Theme.updateFontConfig
    parent()->updateFontConfig();
}


#include "themeadaptor.moc"
