/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a sessionadaptor -c SessionAdaptor -i application.h -l Application /run/media/tokyo/DATA/Documents/final/core/session/com.matsya.Session.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "sessionadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class SessionAdaptor
 */

SessionAdaptor::SessionAdaptor(Application *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SessionAdaptor::~SessionAdaptor()
{
    // destructor
}

void SessionAdaptor::launch(const QString &exec, const QString &workingDirectory, const QStringList &args)
{
    // handle method call com.matsya.Session.launch
    parent()->launch(exec, workingDirectory, args);
}

void SessionAdaptor::launch(const QString &exec, const QStringList &args)
{
    // handle method call com.matsya.Session.launch
    parent()->launch(exec, args);
}

void SessionAdaptor::logout()
{
    // handle method call com.matsya.Session.logout
    parent()->logout();
}

void SessionAdaptor::powerOff()
{
    // handle method call com.matsya.Session.powerOff
    parent()->powerOff();
}

void SessionAdaptor::reboot()
{
    // handle method call com.matsya.Session.reboot
    parent()->reboot();
}

void SessionAdaptor::startDesktopProcess()
{
    // handle method call com.matsya.Session.startDesktopProcess
    parent()->startDesktopProcess();
}

void SessionAdaptor::suspend()
{
    // handle method call com.matsya.Session.suspend
    parent()->suspend();
}

void SessionAdaptor::updateNetworkProxy()
{
    // handle method call com.matsya.Session.updateNetworkProxy
    parent()->updateNetworkProxy();
}


#include "sessionadaptor.moc"
