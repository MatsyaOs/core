/****************************************************************************
** Meta object code from reading C++ file 'sessionadaptor.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include "sessionadaptor.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'sessionadaptor.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_SessionAdaptor_t {
    QByteArrayData data[17];
    char stringdata0[1417];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_SessionAdaptor_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_SessionAdaptor_t qt_meta_stringdata_SessionAdaptor = {
    {
QT_MOC_LITERAL(0, 0, 14), // "SessionAdaptor"
QT_MOC_LITERAL(1, 15, 15), // "D-Bus Interface"
QT_MOC_LITERAL(2, 31, 20), // "com.cutefish.Session"
QT_MOC_LITERAL(3, 52, 19), // "D-Bus Introspection"
QT_MOC_LITERAL(4, 72, 1229), // "  <interface name=\"com.cutef..."
QT_MOC_LITERAL(5, 1201, 6), // "launch"
QT_MOC_LITERAL(6, 1208, 0), // ""
QT_MOC_LITERAL(7, 1209, 4), // "exec"
QT_MOC_LITERAL(8, 1214, 16), // "workingDirectory"
QT_MOC_LITERAL(9, 1231, 4), // "args"
QT_MOC_LITERAL(10, 1236, 6), // "logout"
QT_MOC_LITERAL(11, 1243, 9), // "Q_NOREPLY"
QT_MOC_LITERAL(12, 1253, 8), // "powerOff"
QT_MOC_LITERAL(13, 1262, 6), // "reboot"
QT_MOC_LITERAL(14, 1269, 19), // "startDesktopProcess"
QT_MOC_LITERAL(15, 1289, 7), // "suspend"
QT_MOC_LITERAL(16, 1297, 18) // "updateNetworkProxy"

    },
    "SessionAdaptor\0D-Bus Interface\0"
    "com.cutefish.Session\0D-Bus Introspection\0"
    "  <interface name=\"com.cutefish.Session\">\n    <method name=\"logout"
    "\">\n      <annotation value=\"true\" name=\"org.freedesktop.DBus.Meth"
    "od.NoReply\"/>\n    </method>\n    <method name=\"reboot\">\n      <an"
    "notation value=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>"
    "\n    </method>\n    <method name=\"powerOff\">\n      <annotation val"
    "ue=\"true\" name=\"org.freedesktop.DBus.Method.NoReply\"/>\n    </meth"
    "od>\n    <method name=\"suspend\">\n      <annotation value=\"true\" n"
    "ame=\"org.freedesktop.DBus.Method.NoReply\"/>\n    </method>\n    <met"
    "hod name=\"startDesktopProcess\">\n      <annotation value=\"true\" na"
    "me=\"org.freedesktop.DBus.Method.NoReply\"/>\n    </method>\n    <meth"
    "od name=\"updateNetworkProxy\">\n      <annotation value=\"true\" name"
    "=\"org.freedesktop.DBus.Method.NoReply\"/>\n    </method>\n    <method"
    " name=\"launch\">\n      <arg direction=\"in\" type=\"s\" name=\"exec\""
    "/>\n      <arg direction=\"in\" type=\"as\" name=\"args\"/>\n    </met"
    "hod>\n    <method name=\"launch\">\n      <arg direction=\"in\" type=\""
    "s\" name=\"exec\"/>\n      <arg direction=\"in\" type=\"s\" name=\"wor"
    "kingDirectory\"/>\n      <arg direction=\"in\" type=\"as\" name=\"args"
    "\"/>\n    </method>\n  </interface>\n\0"
    "launch\0\0exec\0workingDirectory\0args\0"
    "logout\0Q_NOREPLY\0powerOff\0reboot\0"
    "startDesktopProcess\0suspend\0"
    "updateNetworkProxy"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_SessionAdaptor[] = {

 // content:
       8,       // revision
       0,       // classname
       2,   14, // classinfo
       8,   18, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // classinfo: key, value
       1,    2,
       3,    4,

 // slots: name, argc, parameters, tag, flags
       5,    3,   58,    6, 0x0a /* Public */,
       5,    2,   65,    6, 0x0a /* Public */,
      10,    0,   70,   11, 0x0a /* Public */,
      12,    0,   71,   11, 0x0a /* Public */,
      13,    0,   72,   11, 0x0a /* Public */,
      14,    0,   73,   11, 0x0a /* Public */,
      15,    0,   74,   11, 0x0a /* Public */,
      16,    0,   75,   11, 0x0a /* Public */,

 // slots: parameters
    QMetaType::Void, QMetaType::QString, QMetaType::QString, QMetaType::QStringList,    7,    8,    9,
    QMetaType::Void, QMetaType::QString, QMetaType::QStringList,    7,    9,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void SessionAdaptor::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<SessionAdaptor *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->launch((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2])),(*reinterpret_cast< const QStringList(*)>(_a[3]))); break;
        case 1: _t->launch((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QStringList(*)>(_a[2]))); break;
        case 2: _t->logout(); break;
        case 3: _t->powerOff(); break;
        case 4: _t->reboot(); break;
        case 5: _t->startDesktopProcess(); break;
        case 6: _t->suspend(); break;
        case 7: _t->updateNetworkProxy(); break;
        default: ;
        }
    }
}

QT_INIT_METAOBJECT const QMetaObject SessionAdaptor::staticMetaObject = { {
    QMetaObject::SuperData::link<QDBusAbstractAdaptor::staticMetaObject>(),
    qt_meta_stringdata_SessionAdaptor.data,
    qt_meta_data_SessionAdaptor,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *SessionAdaptor::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *SessionAdaptor::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_SessionAdaptor.stringdata0))
        return static_cast<void*>(this);
    return QDBusAbstractAdaptor::qt_metacast(_clname);
}

int SessionAdaptor::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractAdaptor::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 8)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 8;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 8)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 8;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
